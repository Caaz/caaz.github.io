<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[github-pages]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>github-pages</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 06 Dec 2024 07:07:28 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 06 Dec 2024 07:07:27 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Havoc]]></title><description><![CDATA[Havoc is an arcade destruction game. Players take on the role of a kaiju and attack cities in a fully destructible environment.Havoc combines the action of Rampage with the environmental detail of Terraria, players will be tasked with destroying a certain percentage of the city, and the faster they do so the more points they get. During the level, <img alt="rampage-screenshot.png" src="assets/rampage-screenshot.png" target="_self"><br>
<img alt="terraria-screenshot.png" src="assets/terraria-screenshot.png" target="_self">
Rampage Kaiju player
City levels
Unlockable characters Terraria Destructable Environments
Character abilities, builds
Small tile sizes The levels will be tile based, the player's character will be some multiple of the tile size, this should give the player a good sense of scale, NPC characters will be one tile tall. This is intended to give the player a sense of scale.<br>
<img alt="havoc-mock.png" src="assets/havoc-mock.png" target="_self">]]></description><link>game-design-documents/havoc.html</link><guid isPermaLink="false">Game Design Documents/Havoc.md</guid><pubDate>Fri, 06 Dec 2024 07:00:59 GMT</pubDate><enclosure url="assets/rampage-screenshot.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="assets/rampage-screenshot.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Index]]></title><description><![CDATA[Hi! My name is Daniel, but I usually go by Caaz. I'm a developer of many things, and this site is where I publish living documents, these somewhat operate as a blog, though you can expect the pages to be refactored and change with time as I learn. Here, I'll write up game design documents, sometimes these will be just practice to get an idea of how to write one of these properly and get feedback, other times they may be actual games I plan on creating. In either case, you are free to use the ideas there for your own games, worst case scenario I can't imagine anyone would be able to create exactly the game I have in mind, and if they do, well then I don't have to make it, win win!Notes you find here will be things I've picked up from videos or through running into issues myself. These I hope to serve as a font of knowledge for other developers.If you're looking to work with me, you should probably get to know what it's like <a data-href="Working With Me" href="working-with-me.html#_0" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="LiQuestionMarkGlyph" aria-label="LiQuestionMarkGlyph" data-icon="LiQuestionMarkGlyph" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="question-mark-glyph"><path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"></path><path d="M9.09009 9.00003C9.32519 8.33169 9.78924 7.76813 10.4 7.40916C11.0108 7.05019 12.079 6.94542 12.7773 7.06519C13.9093 7.25935 14.9767 8.25497 14.9748 9.49073C14.9748 11.9908 12 11.2974 12 14"></path><path d="M12 17H12.01"></path></svg></span>Working With Me</a> first. Otherwise, I'm always free to talk. The best way for internet strangers to reach me is through <a data-tooltip-position="top" aria-label="https://bsky.app/profile/caaz.me" rel="noopener nofollow" class="external-link is-unresolved" href="https://bsky.app/profile/caaz.me" target="_self">bluesky @caaz.me</a>. ]]></description><link>index.html</link><guid isPermaLink="false">Index.md</guid><pubDate>Fri, 06 Dec 2024 04:26:20 GMT</pubDate></item><item><title><![CDATA[Error Handling]]></title><description><![CDATA[Godot doesn't have traditional error handling, so we should use <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Defensive_programming" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Defensive_programming" target="_self">defensive programming</a> practices to ensure our games don't explode on users.
If it can't be done, do nothing.
<br>One of the easiest ways to apply defensive programming in godot is to <a data-tooltip-position="top" aria-label="https://medium.com/swlh/return-early-pattern-3d18a41bba8" rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/swlh/return-early-pattern-3d18a41bba8" target="_self">return early</a> on invalid states. The basic idea is that the reader of our code mostly cares about the "happy path". This breaks most functions down into two parts: "Check invalid states", "Do what the function is named for"For example, let's take a look at this load_level function. func load_level(index:int) -&gt; void: # Check invalid sates if levels.size() &lt; index: printerr("Invalid level index: {0}".format(index)) return if not is_instance_valid(game_node): return # Do the thing for child in game_node.get_children(): child.queue_free() var level = levels[index].instantiate() game_node.add_child(level) hide()
It needs to grab a scene from a levels array, instantiate it, and add it as a child to another node. This means we need to check two things:
Is the level index we're trying to add even valid?
Is the node we intend on placing our level a valid node?
If those two succeed, we know we can go on with our process and we're reasonably certain that the function should succeed. If either fail, the function simply does nothing. If we wanted, in the future we could check that if you're loading an already loaded level, it'd also do nothing. This would make the method idempotent. Returning early really only works for void functions, as functions that return a typed value shouldn't just return void all of a sudden. If we expect an integer, it should return an integer. In Godot, there are functions that explicitly return a value, and error when they cannot. For example, raycasts:if raycast.is_colliding(): var point = raycast.get_collision_point()
if you were to call get_collision_point without is_colliding == true, then it'd raise an error, this leaves it up to the implementer to only call the method when it can be called.]]></description><link>notes/godot/error-handling.html</link><guid isPermaLink="false">Notes/Godot/Error Handling.md</guid><pubDate>Fri, 06 Dec 2024 04:05:48 GMT</pubDate></item><item><title><![CDATA[Node and Scene References]]></title><description><![CDATA[Like all programming problems, referencing a node or scene in a Godot script can be done in many ways. I've found that some of these ways can raise issues during development that can cause problems, and should probably be avoided because of it.# via find_child
@onready var some_node = find_child("SomeNode")
# via $Name
@onready var some_node = $SomeNode
# via unique name
@onready var some_node = %SomeNode
# via export
@export var some_node:Node
The first two suffer from an annoying issue, if we happen to restructure the scene's tree, and move SomeNode to a child of a different node, the script breaks, and we have to go in and modify the script to resolve it.The third option is safe from that problem of course, but it runs into a different issue: If you happen to change that node's name, it once again breaks our script causing us to refactor again.The fourth however, an exported variable, I believe is the best solution, it's immune from both of the previous issues, as godot will track when the name or location of the node changes. Additionally, it forces us to properly type hint the node.Scene references have less options for referencing them, but again, I'd avoid hard-coding the path for scenes in a script, as again, moving that file around will break that script. An exported variable instead work well to avoid that.@export var some_scene:PackedScene
Circular Dependencies can happen with the exported variable approach for scenes specifically. If for example, you have scene_a with an exported variable to scene_b, then have scene_b with an exported variable to scene_a, neither scene will be loadable by the Godot editor.This issue is difficult to notice, as you can set it up in the editor, and while the project is in memory, it's fine. The error only arises when loading the scene into memory. Regularly reloading the project on git merges is a good practice to avoid one of these slipping by.In these scenarios, it might actually be easier to hard-code the scene locations, perhaps in a global autoload script, as at least then if it breaks a script, it'll only break one script.]]></description><link>notes/godot/node-and-scene-references.html</link><guid isPermaLink="false">Notes/Godot/Node and Scene References.md</guid><pubDate>Fri, 06 Dec 2024 04:05:48 GMT</pubDate></item><item><title><![CDATA[Project Structure]]></title><description><![CDATA[Generally, the project structure I've seen most is as follows:addons (third party plugins and assets)
assets art sprites tiles backgrounds ui vfx audio music sfx
resources
scenes (.tscn files)
scripts (.gd files)
shaders
What winds up happening is the scripts wind up in the scenes folder and we wind up refactoring eventually which can get messy.
I suggest a scene oriented approach instead:addons (third party stuff)
art sprites tiles backgrounds ui vfx
audio music sfx
resources
scenes (example_scene_folder) (example.tscn) (example.gd)
scripts (global_script.gd)
shaders
The goal here is to take advantage of godot's default script placement (in the folder of the screen it's being instantiated in), so that its default will place it with the scene it's related to. Additionally, this'll mean scenes with a lot of scripts specific to it will be placed in its scene folder, which will contain its messiness.Another benefit, is it'll be very clear which scripts are actually in use and not just leftover from some deleted scene, as if we delete a scene, we'd delete its folder, and all scripts related to it.Additionally, this makes art and audio top level, there's not a massive benefit to stuffing them into assets, they deserve to be first class citizens!The scripts folder that does exist here will be specifically for global, autoload singleton scripts only.]]></description><link>notes/godot/project-structure.html</link><guid isPermaLink="false">Notes/Godot/Project Structure.md</guid><pubDate>Fri, 06 Dec 2024 04:05:48 GMT</pubDate></item><item><title><![CDATA[Resolving Conflicts]]></title><description><![CDATA[When using git, Godot scenes (.tscn) files tend to conflict very easily, any new node or resource added to the scene will modify the first line of the scene file:[gd_scene load_steps=5 format=3 uid="uid://bdldxaka32a6w"]
Typically the difference is load_steps, looking into this, it's simply a counter Godot uses to render a loading screen. those steps is the count of resources it needs to load into memory. It appears that Godot will recalculate this value on saving the scene, so whichever half of the conflict is chosen doesn't seem to matter.External Resource conflicts are the more messy problem. External resources are defined in scenes like so:[ext_resource type="Script" path="res://scripts/main_menu.gd" id="1_427ti"]
Each external resource has a path and an id, the id is used to reference that resource throughout the scene, like so:script = ExtResource("1_427ti")
In the event that Godot returns a "missing resource" error and the resource is defined in the scene, it's likely that we've got a circular dependency. More info in <a data-href="Node and Scene References#Circular Dependencies" href="notes/godot/node-and-scene-references.html#Circular_Dependencies_0" class="internal-link" target="_self" rel="noopener nofollow">Node and Scene References &gt; Circular Dependencies</a>]]></description><link>notes/godot/resolving-conflicts.html</link><guid isPermaLink="false">Notes/Godot/Resolving Conflicts.md</guid><pubDate>Fri, 06 Dec 2024 04:05:48 GMT</pubDate></item><item><title><![CDATA[Working With Me]]></title><description><![CDATA[As a developer I've had the chance to work with many teams, professionals, and hobbyists. Over the years I've really discovered what values I consider important to me while working, and I think those values would be useful to those who want to work with me in the future.
Here you can get the best idea of how best to utilize my skills and worth ethics to ensure my productivity is maximized and your expectations are in line with what quality I can provide.One of my major motivators is learning, everything else is second to that. I find enjoyment in learning new skills and applying them, and when I'm not doing that, it's all just busywork. I don't enjoy taking on projects that I know I can do, I prefer to push my limits and ensure I get the maximum value out of everything I work on.
I enjoy problem solving, I enjoy what I do. Don't make my work about money, I could work anywhere doing anything for money, If I agree to work on a project, it's because I want to, not because I have to.Product requirements, feature specifications, team agreements. Those should be a requirement before starting feature work. If the team isn't on the same page it is near impossible to work together effectively.
As a developer, I've always preferred a by-the-book approach to working in a team, without established guidelines, it's very difficult to even begin working together, as naming conventions, coding patterns, and approaches to problems can vary wildly. Documentation ensures all developers are guiding the code in the same direction.While developing, there's a common saying: "Make it work, make it right, make it fast." However, a lot of developers stop at making it work, and considering that "done." This is especially prevalent under tight deadlines, and I've seen this time and time again at startups and in game jams.
I believe, even under tight deadlines, at the very least, "make it right" must be reached. This means good architecture and code patterns, and being aware of when a pattern can become a problem.If you want me in a meeting, serve a clear purpose. If you put me in a meeting where my participation is not explicitly required I will tune out the entire thing and socially auto-pilot my way through it all.
I don't actually mind meetings, I could sit in one all day, but you won't get productivity code-wise out of me during one. I am near incapable of writing code while listening to people talk.Well, if you can get behind my key values, what I stand for as a developer, then feel free to <a data-tooltip-position="top" aria-label="Index > Contact" data-href="Index#Contact" href="index.html#Contact_0" class="internal-link" target="_self" rel="noopener nofollow">contact me</a>. I'm open to working on anything, so long as I can learn from it.]]></description><link>working-with-me.html</link><guid isPermaLink="false">Working With Me.md</guid><pubDate>Fri, 06 Dec 2024 04:05:48 GMT</pubDate></item></channel></rss>